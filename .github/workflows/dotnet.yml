name: Build and Publish

on:
  workflow_dispatch: # manual trigger
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SOLUTION: TOS.Data.MongoDB.sln
  NUGET_URL: https://nuget.pkg.github.com/ogaiht/index.json 

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

#    - name: Cache dependencies
#      uses: actions/cache@v2
#      with:
#        path: ~/.nuget/packages        
#        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
#        restore-keys: ${{ runner.os }}-nuget
    
    - name: Ensure GitHub Nuget Source
      run: |
        dotnet nuget remove source github
        dotnet nuget add source ${{ env.NUGET_URL }} \
          -n github \
          -u ${{ secrets.PACKAGE_OWNER_NAME }} \
          -p ${{ secrets.PACKAGE_CONSUMER_TOKEN }} \
          --store-password-in-clear-text
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.11
      with:
        versionSpec: '5.x'
    
    - name: Calculate Build Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.11
      
    - name: Set VERSION
      run: |
        echo ${{ steps.gitversion.outputs.semVer }}.${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}-${{ steps.gitversion.outputs.ShortSha}}
       #echo "VERSION=$(echo ${{ steps.gitversion.outputs.semVer }}.${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}-$(echo ${{ steps.gitversion.outputs.ShortSha}} | sed 's/^[0-9]*//'))" >> $GITHUB_ENV
        echo "VERSION=$(echo ${{ steps.gitversion.outputs.semVer }}.${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }})" >> $GITHUB_ENV
        echo "SHORT_VERSION=$(echo ${{ steps.gitversion.outputs.semVer }})" >> $GITHUB_ENV
        
    - name: Print VERSION
      run: echo "VERSION - $VERSION"

    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build $SOLUTION --no-restore /property:Configuration=Release /property:Version=$SHORT_VERSION
      
    - name: Test
      run: dotnet test $SOLUTION --verbosity normal /property:CollectionCoverage=true /property:CoverletOutputFormat=opencover

    - name: Creating Packages
      run: dotnet pack $SOLUTION --no-restore /property:Configuration=Release /property:Version=$SHORT_VERSION  /property:NuGetVersion=$SHORT_VERSION -o out

    - name: Push Packages
      run: dotnet nuget push ${{ github.workspace }}/out/*.nupkg --skip-duplicate --no-symbols true --source $NUGET_URL --api-key ${{ secrets.PACKAGE_PUBLISHER_TOKEN }}

    - name: Cleanup
      if: always()
      continue-on-error: true
      run: |
        dotnet nuget remove source github
